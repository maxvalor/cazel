#!/bin/bash

declare g_config="depends.json"
declare g_cmake="depends.cmake"
declare g_cmakelists="CMakeLists.txt"

function check_dr_project()
{
  local project_path=$1
  if [ ! -f $project_path/$g_config ]; then
    return 1
  fi

  return 0
}

function check_cmakefile()
{
  local project_path=$1
  if [ ! -f "$project_path/CMakeLists.txt" ]; then
    echo "CMakeLists.txt not found."
    return 1
  fi
  return 0
}

function create_cmake()
{
  local project_path=$1
  if [ -f $project_path/$g_cmake ]; then
    rm $project_path/$g_cmake
  fi
  touch $project_path/$g_cmake
}

function update_cmakelists()
{
  local cmake_content=`cat $g_cmakelists`
  local found=0
  for txt in $cmake_content
  do
    if [ "$txt" == "include(depends.cmake)" ]; then
      found=1
    fi
  done

  if [ $found -eq 0 ];then
    echo " " >> $g_cmakelists
    echo "# added by depends_resolver" >> $g_cmakelists
    echo "include(depends.cmake)" >> $g_cmakelists
  fi
}

function get_config_value()
{
  local pattern=".config.$1"
  local config_file=$2
  jq -r $pattern $config_file
}
function get_depend_value()
{
  local pattern=".$1"
  local config_file=$2
  jq -r $pattern $config_file
}

function clone_repo()
{
  local config_file=$1
  local url=$2
  local name=`get_depend_value "name" $config_file`
  local depends_path=$3
  if [ -d $name ]; then
    cd $name
    git pull
    cd ..
  else
    if [ "$depends_path" == "" ]; then
      depends_path=.
    fi
    git clone $url $depends_path/$name
    local commit=`get_depend_value "commit" $config_file`
    local tag=`get_depend_value "tag" $config_file`

    if [ "$branch" != "null" ] && [ "$branch" != ""  ];then
      cd $name
      git checkout $branch
      cd ..
    fi
    if [ "$tag" != "null" ] && [ "$tag" != ""  ];then
      cd $name
      git checkout $tag
      cd ..
    fi
    if [ "$commit" != "null" ] && [ "$commit" != ""  ];then
      cd $name
      git checkout $commit
      cd ..
    fi
  fi
  return 0
}

function copy_local()
{
  local config_file=$1
  local url=$2
  local depends_path=$3
  echo -n "copying local repo:"$2"..."
  if [ "$depends_path" == "" ]; then
    depends_path=.
  fi
  cp -r $2 $depends_path/
  echo "done."
}

function download_from_ftp()
{
  echo "download_from_ftp"
}

function sync_sub_repo()
{
  local workspace=`pwd`
  local project=$1
  local project_name
  local root_depends_path=$2
  local root_depends_name=$3
  local depends_path

  echo root_depends_path:$root_depends_path

  echo -n "Checing workspace..."

  if [ "$project" == "" ]; then
    project="."
  fi

  if [ ! -d $project ]; then
    echo "Project $project not found."
    return 1
  fi

  check_dr_project $project
  if [ $? -eq 1 ]; then
    echo "Not a dr project."
    return 1
  fi

  echo "done."

  echo "Analysising $g_config..."
  cd $project

  project_name=`get_config_value "name" $g_config`
  depends_path=`get_config_value "path" $g_config`

  if [ "$depends_path" != "null"  ]; then
    if [ ! -d $depends_path ]; then
      mkdir -p $depends_path
    fi
  fi

  cd $depends_path

  local rlt=""
  local index=0
  while [ "$rlt" != "null" ]
  do
    local pattern=".depends[$index]"
    local one_depend=`jq -r $pattern ../$g_config`
    rlt="$one_depend"
    if [ "$rlt" != "null" ];then
      local cache_file="cache.json"
      echo $one_depend > $cache_file
      local name=`get_depend_value "name" $cache_file`
      mv $cache_file $name.json
      cache_file=$name.json
      echo "Depend [$name] found:"
      add_sub_str="add_subdirectory($root_depends_name/$name)"
      if [ `grep -c "$add_sub_str" $root_depends_path/../$g_cmake` -eq '0' ];then
        echo $add_sub_str >> $root_depends_path/../$g_cmake
      fi
      local url=`get_depend_value "url" $cache_file`
      if [ "$url" != "null" ] && [ "$url" != "" ];then
        if [ -L $name ]; then
          rm -f $name
        fi
        clone_repo $cache_file $url $root_depends_path
        ln -s $root_depends_path/$name $name
        check_dr_project $name
        if [ $? -eq 0 ]; then
          sync_sub_repo $name $root_depends_path $root_depends_name
        fi
        index=`expr $index + 1`
        continue
      fi

      local local=`get_depend_value "local" $cache_file`
      if [ "$local" != "null" ] && [ "$local" != ""  ];then
        if [ -L $name ]; then
          rm -f $name
        fi
        copy_local $cache_file $local $root_depends_path
        ln -s $root_depends_path/$name $name
        check_dr_project $name
        if [ $? -eq 0 ]; then
          sync_sub_repo $name $root_depends_path $root_depends_name
        fi
        index=`expr $index + 1`
        continue
      fi

      local ftp=`get_depend_value "ftp" $cache_file`
      if [ "$ftp" != "null" ] && [ "$ftp" != ""  ];then
        download_from_ftp $cache_file $ftp $root_depends_path
        check_dr_project $name
        if [ $? -eq 0 ]; then
          sync_sub_repo $name $root_depends_path $root_depends_name
        fi
        ln -s $root_depends_path/$name $name
        index=`expr $index + 1`
        continue
      fi
    fi
    index=`expr $index + 1`
  done

  cd ..

  cd $workspace
  echo "Finished to sync project $project_name."
}

function sync_repo()
{
  local workspace=`pwd`
  local project=$1
  local project_name
  local depends_path

  echo -n "Checing workspace..."

  if [ "$project" == "" ]; then
    project="."
  fi

  if [ ! -d $project ]; then
    echo "Project $project not found."
    return 1
  fi

  check_dr_project $project
  if [ $? -eq 1 ]; then
    echo "Not a dr project."
    return 1
  fi

  echo "done."

  echo "Analysising $g_config..."
  cd $project

  project_name=`get_config_value "name" $g_config`
  depends_path=`get_config_value "path" $g_config`

  if [ "$depends_path" != "null"  ]; then
    if [ ! -d $depends_path ]; then
      mkdir -p $depends_path
    fi
  fi

  create_cmake .
  cd $depends_path

  local rlt=""
  local index=0
  while [ "$rlt" != "null" ]
  do
    local pattern=".depends[$index]"
    local one_depend=`jq -r $pattern ../$g_config`
    rlt="$one_depend"
    if [ "$rlt" != "null" ];then
      local cache_file="cache.json"
      echo $one_depend > $cache_file
      local name=`get_depend_value "name" $cache_file`
      mv $cache_file $name.json
      cache_file=$name.json
      echo "Depend [$name] found:"
      echo "add_subdirectory($depends_path/$name)" >> ../$g_cmake
      local url=`get_depend_value "url" $cache_file`
      if [ "$url" != "null" ] && [ "$url" != "" ];then
        clone_repo $cache_file $url
        check_dr_project $name
        if [ $? -eq 0 ]; then
          sync_sub_repo $name `pwd` $depends_path
        fi
        index=`expr $index + 1`
        continue
      fi

      local local=`get_depend_value "local" $cache_file`
      if [ "$local" != "null" ] && [ "$local" != ""  ];then
        copy_local $cache_file $local
        check_dr_project $name
        if [ $? -eq 0 ]; then
          sync_sub_repo $name `pwd` $depends_path
        fi
        index=`expr $index + 1`
        continue
      fi

      local ftp=`get_depend_value "ftp" $cache_file`
      if [ "$ftp" != "null" ] && [ "$ftp" != ""  ];then
        download_from_ftp $cache_file $ftp
        check_dr_project $name
        if [ $? -eq 0 ]; then
          sync_sub_repo $name `pwd` $depends_path
        fi
        index=`expr $index + 1`
        continue
      fi
    fi
    index=`expr $index + 1`
  done

  cd ..

  update_cmakelists .

  cd $workspace
  echo "Finished to sync project $project_name."
}

function main()
{
  if [ $# -gt 1 ]; then
    echo "too many arguments."
    return 1
  fi
  sync_repo $@
}

main $@
